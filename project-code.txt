

üìÑ src\App.tsx
import React, { useCallback, useEffect, useState } from 'react';
import { ThemeProvider } from 'styled-components';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import AboutModal from './components/AboutModal';
import Box from './components/Box';
import Button from './components/Button';
import Control from './components/Control/Control';
import GameBoard from './components/GameBoard';
import GlobalStyle from './components/GlobalStyle';
import HowToPlayModal from './components/HowToPlayModal';
import ScoreBoard from './components/ScoreBoard';
import SettingsModal from './components/SettingsModal';
import Text from './components/Text';
import Timer from './components/Timer'; // –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä

// –•—É–∫–∏
import useGameBoard from './hooks/useGameBoard';
import useGameScore from './hooks/useGameScore';
import useGameState, { GameStatus } from './hooks/useGameState';
import useLocalStorage from './hooks/useLocalStorage';
import useScaleControl from './hooks/useScaleControl';
import useTheme from './hooks/useTheme';
import { useTimer } from './hooks/useTimer';

// –£—Ç–∏–ª–∏—Ç—ã
import { GRID_SIZE, MIN_SCALE, SPACING } from './utils/constants';

// –¢–∏–ø—ã
import { ThemeName } from './themes/types';

export type Configuration = {
  theme: ThemeName;
  bestScore: number;
  rows: number;
  cols: number;
};

// –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è localStorage
export const APP_NAME = 'react-2048';

const App: React.FC = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  const [gameState, setGameStatus] = useGameState({
    status: 'running',
    pause: false,
  });

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  const [config, setConfig] = useLocalStorage<Configuration>(APP_NAME, {
    theme: 'default',
    bestScore: 0,
    rows: MIN_SCALE,
    cols: MIN_SCALE,
  });

  // –¢–µ–º–∞
  const [{ name: themeName, value: themeValue }, setTheme] = useTheme(config.theme);

  // –†–∞–∑–º–µ—Ä –ø–æ–ª—è
  const [rows, setRows] = useScaleControl(config.rows);
  const [cols, setCols] = useScaleControl(config.cols);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–º
  const { total, best, addScore, setTotal } = useGameScore(config.bestScore);

  // –¢–∞–π–º–µ—Ä
  const [isGameRunning, setIsGameRunning] = useState(true);
  const { formattedTime, resetTimer } = useTimer(isGameRunning);

  // –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
  const { tiles, onMove, onMovePending, onMergePending, undoMove } = useGameBoard({
    rows,
    cols,
    gameState,
    addScore,
  });

  // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    if (gameState.status === 'restart') {
      resetTimer();
      setIsGameRunning(true);
    }
  }, [gameState.status, resetTimer]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –ø–æ–±–µ–¥–µ –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
  useEffect(() => {
    if (gameState.status === 'win' || gameState.status === 'lost') {
      setIsGameRunning(false);
    }
  }, [gameState.status]);

  // –°–±—Ä–æ—Å –∏–≥—Ä—ã
  const onResetGame = useCallback(() => {
    setTotal(0);
    setGameStatus('restart');
  }, [setTotal, setGameStatus]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const onCloseNotification = useCallback(
    (currentStatus: GameStatus) => {
      setGameStatus(currentStatus === 'win' ? 'continue' : 'restart');
    },
    [setGameStatus]
  );

  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  const [showAbout, setShowAbout] = useState(false);
  const [showHowToPlay, setShowHowToPlay] = useState(false);
  const [showSettings, setShowSettings] = useState(false);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ localStorage
  useEffect(() => {
    setConfig({ rows, cols, bestScore: best, theme: themeName });
  }, [rows, cols, best, themeName, setConfig]);

  return (
    <ThemeProvider theme={themeValue}>
      <>
        <GlobalStyle />
        <Box
          justifyContent="center"
          inlineSize="100%"
          blockSize="100%"
          alignItems="start"
          borderRadius={0}
        >
          {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Å–µ—Ç–∫–∏ */}
          <Box
            flexDirection="column"
            marginInlineEnd="s6"
            style={{
              minWidth: '180px',
              padding: '16px',
              backgroundColor: themeValue.palette.background,
              borderRadius: '12px',
              boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',
            }}
          >
            <Box flexDirection="column" marginBlockEnd="s4">
              <Text fontSize={20} fontWeight="bold" color="primary">
                –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏
                </Text>
                </Box>
            <Control
              rows={rows}
              cols={cols}
              onChangeRow={setRows}
              onChangeCol={setCols}
            />
          </Box>

          {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å ‚Äî –∏–≥—Ä–∞ */}
          <Box
            justifyContent="center"
            flexDirection="column"
            inlineSize={`${GRID_SIZE}px`}
          >
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—á—ë—Ç—á–∏–∫–∏ */}
            <Box inlineSize="100%" justifyContent="space-between" marginBlockStart="s2">
              <Box>
                <Text fontSize={64} fontWeight="bold" color="primary">2048</Text>
              </Box>
              <Box justifyContent="center">
                <ScoreBoard total={total} title="–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç" />
                <ScoreBoard total={best} title="–õ—É—á—à–∏–π —Å—á—ë—Ç" />
                <Timer time={formattedTime} /> {/* –í—Ä–µ–º—è –∏–≥—Ä—ã */}
              </Box>
            </Box>

            {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}
            <GameBoard
              tiles={tiles}
              boardSize={GRID_SIZE}
              rows={rows}
              cols={cols}
              spacing={SPACING}
              gameStatus={gameState.status}
              onMove={onMove}
              onMovePending={onMovePending}
              onMergePending={onMergePending}
              onCloseNotification={onCloseNotification}
            />

            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
            <Box marginBlock="s4" justifyContent="center" flexDirection="column">
              <Text fontSize={16} as="p" color="primary">
                ‚ú® –°–æ–µ–¥–∏–Ω—è–π—Ç–µ –ø–ª–∏—Ç–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —á–∏—Å–ª–∞–º–∏
              </Text>
              <Text fontSize={16} as="p" color="primary">
                ‚è≥ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –∏–ª–∏ —Å–≤–∞–π–ø—ã
              </Text>
            </Box>
          </Box>

          {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å ‚Äî –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <Box
            flexDirection="column"
            marginInlineStart="s6"
            justifyContent="start"
            style={{
              minWidth: '180px',
              padding: '16px',
              backgroundColor: themeValue.palette.background,
              borderRadius: '12px',
              boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',
            }}
          >
            <Button onClick={onResetGame} style={{ marginBottom: '16px' }}>
              <Text fontSize={20} textTransform="capitalize">üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞</Text>
            </Button>

            <Button onClick={undoMove} style={{ marginBottom: '16px' }}>
              <Text fontSize={20} textTransform="capitalize">‚Ü© –û—Ç–º–µ–Ω–∏—Ç—å —Ö–æ–¥</Text>
            </Button>

            <Button onClick={() => setShowSettings(true)}>
              <Text fontSize={20} textTransform="capitalize">‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏</Text>
            </Button>
          </Box>
        </Box>

        {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
        {showAbout && (
          <AboutModal isOpen={showAbout} onClose={() => setShowAbout(false)} />
        )}
        {showHowToPlay && (
          <HowToPlayModal
            isOpen={showHowToPlay}
            onClose={() => setShowHowToPlay(false)}
          />
        )}
        {showSettings && (
          <SettingsModal
            isOpen={showSettings}
            onClose={() => setShowSettings(false)}
            themeName={themeName}
            setTheme={setTheme}
          />
        )}
      </>
    </ThemeProvider>
  );
};

export default App;

üìÅ src\components
const fs = require('fs');
const path = require('path');

const folderPath = 'src'; // –ü–∞–ø–∫–∞ —Å –∫–æ–¥–æ–º
const outputFilePath = 'project-code.txt';

function readAllFiles(folder) {
  let result = '';

  const files = fs.readdirSync(folder);

  for (const file of files) {
    const fullPath = path.join(folder, file);
    if (fs.statSync(fullPath).isDirectory()) {
      result += `\n\nüìÅ ${fullPath}\n`;
      result += fs.readFileSync(__filename, 'utf-8'); // –î–ª—è —Ç–µ—Å—Ç–∞
    } else {
      const content = fs.readFileSync(fullPath, 'utf-8');
      result += `\n\nüìÑ ${fullPath}\n`;
      result += content;
    }
  }

  return result;
}

fs.writeFileSync(outputFilePath, readAllFiles(folderPath));

console.log('–ì–æ—Ç–æ–≤–æ! –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ project-code.txt');

üìÅ src\hooks
const fs = require('fs');
const path = require('path');

const folderPath = 'src'; // –ü–∞–ø–∫–∞ —Å –∫–æ–¥–æ–º
const outputFilePath = 'project-code.txt';

function readAllFiles(folder) {
  let result = '';

  const files = fs.readdirSync(folder);

  for (const file of files) {
    const fullPath = path.join(folder, file);
    if (fs.statSync(fullPath).isDirectory()) {
      result += `\n\nüìÅ ${fullPath}\n`;
      result += fs.readFileSync(__filename, 'utf-8'); // –î–ª—è —Ç–µ—Å—Ç–∞
    } else {
      const content = fs.readFileSync(fullPath, 'utf-8');
      result += `\n\nüìÑ ${fullPath}\n`;
      result += content;
    }
  }

  return result;
}

fs.writeFileSync(outputFilePath, readAllFiles(folderPath));

console.log('–ì–æ—Ç–æ–≤–æ! –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ project-code.txt');

üìÑ src\index.tsx
import { createRoot } from 'react-dom/client';
import App from './App';
import GlobalStyle from './components/GlobalStyle';

const container = document.getElementById('game') as HTMLElement;
const root = createRoot(container);
root.render(
  <>
    <GlobalStyle />
    <App />
  </>,
);


üìÅ src\themes
const fs = require('fs');
const path = require('path');

const folderPath = 'src'; // –ü–∞–ø–∫–∞ —Å –∫–æ–¥–æ–º
const outputFilePath = 'project-code.txt';

function readAllFiles(folder) {
  let result = '';

  const files = fs.readdirSync(folder);

  for (const file of files) {
    const fullPath = path.join(folder, file);
    if (fs.statSync(fullPath).isDirectory()) {
      result += `\n\nüìÅ ${fullPath}\n`;
      result += fs.readFileSync(__filename, 'utf-8'); // –î–ª—è —Ç–µ—Å—Ç–∞
    } else {
      const content = fs.readFileSync(fullPath, 'utf-8');
      result += `\n\nüìÑ ${fullPath}\n`;
      result += content;
    }
  }

  return result;
}

fs.writeFileSync(outputFilePath, readAllFiles(folderPath));

console.log('–ì–æ—Ç–æ–≤–æ! –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ project-code.txt');

üìÅ src\types
const fs = require('fs');
const path = require('path');

const folderPath = 'src'; // –ü–∞–ø–∫–∞ —Å –∫–æ–¥–æ–º
const outputFilePath = 'project-code.txt';

function readAllFiles(folder) {
  let result = '';

  const files = fs.readdirSync(folder);

  for (const file of files) {
    const fullPath = path.join(folder, file);
    if (fs.statSync(fullPath).isDirectory()) {
      result += `\n\nüìÅ ${fullPath}\n`;
      result += fs.readFileSync(__filename, 'utf-8'); // –î–ª—è —Ç–µ—Å—Ç–∞
    } else {
      const content = fs.readFileSync(fullPath, 'utf-8');
      result += `\n\nüìÑ ${fullPath}\n`;
      result += content;
    }
  }

  return result;
}

fs.writeFileSync(outputFilePath, readAllFiles(folderPath));

console.log('–ì–æ—Ç–æ–≤–æ! –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ project-code.txt');

üìÅ src\utils
const fs = require('fs');
const path = require('path');

const folderPath = 'src'; // –ü–∞–ø–∫–∞ —Å –∫–æ–¥–æ–º
const outputFilePath = 'project-code.txt';

function readAllFiles(folder) {
  let result = '';

  const files = fs.readdirSync(folder);

  for (const file of files) {
    const fullPath = path.join(folder, file);
    if (fs.statSync(fullPath).isDirectory()) {
      result += `\n\nüìÅ ${fullPath}\n`;
      result += fs.readFileSync(__filename, 'utf-8'); // –î–ª—è —Ç–µ—Å—Ç–∞
    } else {
      const content = fs.readFileSync(fullPath, 'utf-8');
      result += `\n\nüìÑ ${fullPath}\n`;
      result += content;
    }
  }

  return result;
}

fs.writeFileSync(outputFilePath, readAllFiles(folderPath));

console.log('–ì–æ—Ç–æ–≤–æ! –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ project-code.txt');